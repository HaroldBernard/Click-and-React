{"version":3,"sources":["components/Navbar.js","components/Jumbotron.js","components/Pics.js","components/Footer.js","components/Background.js","components/Animate.js","components/PageContainer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","title","id","rightWrong","score","topScore","Jumbotron","children","Pics","value","onClick","handleClick","alt","name","src","image","Footer","Background","Animate","PageContainer","state","pics","currentScore","clicked","_this","indexOf","handleIncrement","setState","concat","handleReset","newScore","handleShuffle","shuffle","_this2","this","components_Background","components_Navbar","components_Jumbotron","map","components_Pics","key","components_Animate","components_Footer","Component","App","components_PageContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.019d0039.chunk.js","sourcesContent":["import React from \"react\";\nimport '../App.css';\n\n\nconst Navbar = props => (\n  <nav className=\"nav navbar navbar-expand-lg navbar-light bg-light nav-fill\">\n      <li className=\"nav-item\">\n        <a href=\"/\">{props.title}</a>\n      </li>\n\n      <li className=\"nav-item\" id=\"rw\">{props.rightWrong}</li>\n\n      <li className=\"nav-item\" id=\"cur-sco\">Current Score: {props.score}</li>\n\n      <li className=\"nav-item\" id=\"top-sco\">Top Score: {props.topScore}</li>\n  </nav>\n);\n\nexport default Navbar;\n","import React from \"react\";\nimport '../App.css';\n\n\nconst Jumbotron = props => (\n <h1 className=\"jumbotron\">{props.children}</h1>\n);\n  \n  export default Jumbotron;\n  ","import React from \"react\";\nimport '../App.css';\n\n\nconst Pics = props => (\n  <div \n    className=\"card col-3\" \n    value={props.id} \n    onClick={() => props.handleClick(props.id)}\n  >\n    <img alt={props.name} src={props.image} />\n  </div>\n);\n\nexport default Pics;\n\n","import React from \"react\";\nconst Footer = () => (\n    <footer>\n        <div className=\"copyright\">Copyright Â©</div>\n    </footer>\n)\nexport default Footer","import React from \"react\";\nimport '../App.css';\n\n\nfunction Background(props) {\n  return <div className=\"background\">{props.children}</div>;\n}\n\nexport default Background;","import React from \"react\";\nimport '../App.css';\n\nconst Animate = () => (\n    <div>\n        <img className=\"cube\" alt=\"Candy Cube\" src=\"https://www.brunnershop.com/out/pictures/master/product/1/os-0050-590-1(1).png\" />\n    </div>\n)\n\nexport default Animate;","import React, { Component } from \"react\";\nimport Navbar from \"./Navbar\";\nimport Jumbotron from \"./Jumbotron\";\nimport Pics from \"./Pics\";\nimport pics from \"./pics.json\";\nimport Footer from \"./Footer\";\nimport \"../App.css\";\nimport Background from \"./Background\";\nimport shuffle from \"shuffle-array\";\nimport Animate from \"./Animate\";\n\n\nclass PageContainer extends Component {\n  \n  // Set this.state\n  state = {\n    pics,\n    currentScore: 0,\n    topScore: 0,\n    rightWrong: \"\",\n    clicked: [],\n  };\n\n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    } else {\n      this.handleReset();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore,\n      rightWrong: \"\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore });\n    }\n    else if (newScore === 12) {\n      this.setState({ rightWrong: \"Congrats You win!\" });\n    }\n    this.handleShuffle();\n  };\n\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      rightWrong: \"Sorry You Lost!\",\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    this.setState({ pics: shuffle(this.state.pics) });\n  };\n\n  render() {\n    return (\n      <Background>\n        <Navbar\n          title=\"Click and React\"\n          score={this.state.currentScore}\n          topScore={this.state.topScore}\n          rightWrong={this.state.rightWrong}\n        />\n        <Jumbotron>Click the images to gain points. If you click all 12 \n          <div>pictures without repeating a click you win!</div></Jumbotron>\n        <div className=\"row\">\n          {this.state.pics.map(pics => (\n            <Pics\n              key={pics.id}\n              handleClick={this.handleClick}\n              handleIncrement={this.handleIncrement}\n              handleReset={this.handleReset}\n              handleShuffle={this.handleShuffle}\n              id={pics.id}\n              image={pics.image}\n            />\n          ))}\n        </div>\n        <Animate></Animate>\n        <Footer></Footer>\n      </Background>\n    )\n      \n  }}\n          \n  export default PageContainer;\n","import React from 'react';\nimport './App.css';\n\nimport PageContainer from \"./components/PageContainer\";\n\nconst App = () => <PageContainer />;\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}